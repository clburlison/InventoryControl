#!/usr/bin/python
"""
This script will make sure this Mac is named properly and that ARD field values
are set properly. All data is pulled from the client munki manifest. Use
https://github.com/clburlison/BananaEndocarp/ to create the initial manifest
for each machine.

Author: Clayton Burlison <https://clburlison.com>
Last Modified: Feb. 10, 2017
"""

from __future__ import print_function
import os
import subprocess
import plistlib
import sys
import objc
from Foundation import NSBundle

sys.path.append('/usr/local/munki')
from munkilib import munkicommon


def get_mac_serial_number():
    '''Get the Mac's Serial Number'''
    # Location of IOKit Bundle - Code from Mike Lynn's Gist
    # https://gist.github.com/pudquick/c7dd1262bd81a32663f0
    IOKit_bundle = NSBundle.bundleWithIdentifier_(
        'com.apple.framework.IOKit')
    functions = [("IOServiceGetMatchingService", b"II@"),
                 ("IOServiceMatching", b"@*"),
                 ("IORegistryEntryCreateCFProperty", b"@I@@I"), ]
    IOKit = dict()
    objc.loadBundleFunctions(IOKit_bundle, IOKit, functions)
    serial_number = IOKit['IORegistryEntryCreateCFProperty'](
        IOKit['IOServiceGetMatchingService'](
            0, IOKit['IOServiceMatching'](
                'IOPlatformExpertDevice')),
        'IOPlatformSerialNumber', None, 0)
    return serial_number


def get_name():
    """Return dictionary with all three Mac Names."""
    data = {}
    names = ['ComputerName', 'HostName', 'LocalHostName']
    for n in names:
        cmd = ['/usr/sbin/scutil', '--get', n]
        proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                                stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, unused_error) = proc.communicate()
        data[n] = out.strip()

    return data


def matcher(display_name, names):
    """Returns True if the display_name matches all strings in the names list
    else False"""
    trigger = None
    for name in names:
        if name != display_name:
            trigger = False
            break
        else:
            trigger = True
    return trigger


def set_names(computername):
    """Set all three Mac name types to the same value from the csv file."""
    name_fields = ['ComputerName', 'HostName', 'LocalHostName']
    for item in name_fields:
        cmd = ['/usr/sbin/scutil', '--set', item, computername]
        proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                                stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, unused_error) = proc.communicate()


def set_ard_text(value, field):
    """Set values for ard text fields."""
    if field in ['Text1', 'Text2', 'Text3', 'Text4']:
        if value in [None, '']:
            cmd = ['/usr/bin/defaults', 'delete',
                   '/Library/Preferences/com.apple.RemoteDesktop.plist', field]
        else:
            cmd = ['/usr/bin/defaults', 'write',
                   '/Library/Preferences/com.apple.RemoteDesktop.plist',
                   field, '-string', value]
        proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                                stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, unused_error) = proc.communicate()
    else:
        print("'{0}' is an unsupported text field.".format(field))


def inventory_control():
    """
    Read the client ManagedInstallReport.plist file to retreive the
    ManifestName in usage. If that doesn't exist it is likely because a munki
    run is active. As a fall back the client serial number will be used as
    the manifest name. The `asset`, `display_name`, and `user` keys are
    pulled from that plist and used to set values on the client computer.
    """
    # Checks munki preferences to see where the install directory is set to.
    MANAGED_INSTALL_DIR = munkicommon.pref('ManagedInstallDir')
    # Read the ManagedInstallReport.plist to get the client manifest
    report = {}
    report_path = os.path.join(MANAGED_INSTALL_DIR,
                               'ManagedInstallReport.plist')
    try:
        report = plistlib.readPlist(report_path)
    except(IOError) as msg:
        print('ManagedInstallReport.plist is unavailable')

    # If the report is generated use it
    manifest_name = report.get('ManifestName')
    if manifest_name is None:
        # The manifest name should be the serial number so use that as a bkup
        manifest_name = get_mac_serial_number()
    manifest_file = os.path.join(MANAGED_INSTALL_DIR, 'manifests',
                                 manifest_name)

    # Read the client manifest file
    if os.path.isfile(manifest_file):
        try:
            manifest = plistlib.readPlist(manifest_file)
        except Exception, message:
            raise Exception("Error reading manifest: {}".format(message))
    else:
        raise Exception("Mainfest does not exist!")

    # Read Birdville ISD important key values
    asset = manifest.get('asset', '')
    display_name = manifest.get('display_name', '')
    user = manifest.get('user', '')

    # Rename the mac if it doesn't match the manifest display_name
    if display_name not in [None, '']:
        rename = matcher(display_name, get_name().values())
        if not rename:
            print("Renaming your computer")
            set_names(display_name)

    # Force set ARD values on every run
    set_ard_text(user, 'Text1')
    set_ard_text(asset, 'Text2')
    set_ard_text('', 'Text3')
    set_ard_text('', 'Text4')


def main():
    """Main method"""
    if not os.geteuid() == 0:
        sys.stderr.write("You must run this as root!")
        exit(1)

    inventory_control()


if __name__ == '__main__':
    main()
